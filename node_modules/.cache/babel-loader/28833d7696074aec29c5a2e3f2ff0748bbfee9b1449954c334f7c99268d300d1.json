{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HOME\\\\Documents\\\\weather-app\\\\src\\\\Components\\\\Forecast.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Forecast = weatherData => {\n  const data = weatherData.weatherData;\n  const gruped = Object.groupBy(data, ({\n    dt_txt\n  }) => dt_txt);\n\n  // Objeto para almacenar los datos agrupados\n  const groupedData = {};\n\n  // Recorrer cada clave del objeto original\n  Object.keys(gruped).forEach(timestamp => {\n    // Extraer solo la parte de la fecha (ignorar la hora)\n    const date = timestamp.split(\" \")[0];\n\n    // Si la fecha no existe en groupedData, crear una nueva entrada con un array vacío\n    if (!groupedData[date]) {\n      groupedData[date] = [];\n    }\n\n    // Añadir el contenido del timestamp al array correspondiente en groupedData\n    groupedData[date] = groupedData[date].concat(data[timestamp]);\n  });\n  return /*#__PURE__*/_jsxDEV(\"aside\", {\n    className: \"flex-1 flex flex-col items-center justify-center px-4 md:px-6\",\n    children: console.log(groupedData)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n_c = Forecast;\nfunction SunIcon(props) {\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ...props,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: \"24\",\n    height: \"24\",\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: \"currentColor\",\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n      cx: \"12\",\n      cy: \"12\",\n      r: \"4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n      d: \"M12 2v2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n      d: \"M12 20v2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n      d: \"m4.93 4.93 1.41 1.41\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n      d: \"m17.66 17.66 1.41 1.41\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n      d: \"M2 12h2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n      d: \"M20 12h2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n      d: \"m6.34 17.66-1.41 1.41\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n      d: \"m19.07 4.93-1.41 1.41\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n_c2 = SunIcon;\nexport default Forecast;\nvar _c, _c2;\n$RefreshReg$(_c, \"Forecast\");\n$RefreshReg$(_c2, \"SunIcon\");","map":{"version":3,"names":["Forecast","weatherData","data","gruped","Object","groupBy","dt_txt","groupedData","keys","forEach","timestamp","date","split","concat","_jsxDEV","className","children","console","log","fileName","_jsxFileName","lineNumber","columnNumber","_c","SunIcon","props","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","cx","cy","r","d","_c2","$RefreshReg$"],"sources":["C:/Users/HOME/Documents/weather-app/src/Components/Forecast.js"],"sourcesContent":["const Forecast = (weatherData) => {\r\n  const data = weatherData.weatherData;\r\n  const gruped = Object.groupBy(data, ({ dt_txt }) => dt_txt);\r\n\r\n  // Objeto para almacenar los datos agrupados\r\n  const groupedData = {};\r\n\r\n  // Recorrer cada clave del objeto original\r\n  Object.keys(gruped).forEach((timestamp) => {\r\n    // Extraer solo la parte de la fecha (ignorar la hora)\r\n    const date = timestamp.split(\" \")[0];\r\n\r\n    // Si la fecha no existe en groupedData, crear una nueva entrada con un array vacío\r\n    if (!groupedData[date]) {\r\n      groupedData[date] = [];\r\n    }\r\n\r\n    // Añadir el contenido del timestamp al array correspondiente en groupedData\r\n    groupedData[date] = groupedData[date].concat(data[timestamp]);\r\n  });\r\n  return (\r\n    <aside className=\"flex-1 flex flex-col items-center justify-center px-4 md:px-6\">\r\n      {console.log(groupedData)}\r\n    </aside>\r\n  );\r\n};\r\nfunction SunIcon(props) {\r\n  return (\r\n    <svg\r\n      {...props}\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      width=\"24\"\r\n      height=\"24\"\r\n      viewBox=\"0 0 24 24\"\r\n      fill=\"none\"\r\n      stroke=\"currentColor\"\r\n      strokeWidth=\"2\"\r\n      strokeLinecap=\"round\"\r\n      strokeLinejoin=\"round\"\r\n    >\r\n      <circle cx=\"12\" cy=\"12\" r=\"4\" />\r\n      <path d=\"M12 2v2\" />\r\n      <path d=\"M12 20v2\" />\r\n      <path d=\"m4.93 4.93 1.41 1.41\" />\r\n      <path d=\"m17.66 17.66 1.41 1.41\" />\r\n      <path d=\"M2 12h2\" />\r\n      <path d=\"M20 12h2\" />\r\n      <path d=\"m6.34 17.66-1.41 1.41\" />\r\n      <path d=\"m19.07 4.93-1.41 1.41\" />\r\n    </svg>\r\n  );\r\n}\r\nexport default Forecast;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}