{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HOME\\\\Documents\\\\weather-app\\\\src\\\\Components\\\\Forecast.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Forecast = weatherData => {\n  const data = weatherData.weatherData;\n\n  // Objeto para almacenar los datos agrupados por día\n  const groupedData = {};\n\n  // Recorrer cada entrada del array\n  data.list.forEach(entry => {\n    // Extraer solo la parte de la fecha (ignorar la hora)\n    const date = entry.dt_txt.split(\" \")[0];\n\n    // Si la fecha no existe en groupedData, crear una nueva entrada con un array vacío\n    if (!groupedData[date]) {\n      groupedData[date] = [];\n    }\n\n    // Añadir la entrada al array correspondiente en groupedData\n    groupedData[date].push(entry);\n  });\n  return /*#__PURE__*/_jsxDEV(\"aside\", {\n    className: \"flex-1 flex flex-col items-center justify-center px-4 md:px-6\",\n    children: Object.keys(groupedData).map(date => console.log(date))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n_c = Forecast;\nexport default Forecast;\nvar _c;\n$RefreshReg$(_c, \"Forecast\");","map":{"version":3,"names":["Forecast","weatherData","data","groupedData","list","forEach","entry","date","dt_txt","split","push","_jsxDEV","className","children","Object","keys","map","console","log","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/HOME/Documents/weather-app/src/Components/Forecast.js"],"sourcesContent":["const Forecast = (weatherData) => {\r\n  const data = weatherData.weatherData;\r\n\r\n  // Objeto para almacenar los datos agrupados por día\r\n  const groupedData = {};\r\n\r\n  // Recorrer cada entrada del array\r\n  data.list.forEach((entry) => {\r\n    // Extraer solo la parte de la fecha (ignorar la hora)\r\n    const date = entry.dt_txt.split(\" \")[0];\r\n\r\n    // Si la fecha no existe en groupedData, crear una nueva entrada con un array vacío\r\n    if (!groupedData[date]) {\r\n      groupedData[date] = [];\r\n    }\r\n\r\n    // Añadir la entrada al array correspondiente en groupedData\r\n    groupedData[date].push(entry);\r\n  });\r\n  return (\r\n    <aside className=\"flex-1 flex flex-col items-center justify-center px-4 md:px-6\">\r\n      {Object.keys(groupedData).map((date) => console.log(date))}\r\n    </aside>\r\n  );\r\n};\r\nexport default Forecast;\r\n"],"mappings":";;AAAA,MAAMA,QAAQ,GAAIC,WAAW,IAAK;EAChC,MAAMC,IAAI,GAAGD,WAAW,CAACA,WAAW;;EAEpC;EACA,MAAME,WAAW,GAAG,CAAC,CAAC;;EAEtB;EACAD,IAAI,CAACE,IAAI,CAACC,OAAO,CAAEC,KAAK,IAAK;IAC3B;IACA,MAAMC,IAAI,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;;IAEvC;IACA,IAAI,CAACN,WAAW,CAACI,IAAI,CAAC,EAAE;MACtBJ,WAAW,CAACI,IAAI,CAAC,GAAG,EAAE;IACxB;;IAEA;IACAJ,WAAW,CAACI,IAAI,CAAC,CAACG,IAAI,CAACJ,KAAK,CAAC;EAC/B,CAAC,CAAC;EACF,oBACEK,OAAA;IAAOC,SAAS,EAAC,+DAA+D;IAAAC,QAAA,EAC7EC,MAAM,CAACC,IAAI,CAACZ,WAAW,CAAC,CAACa,GAAG,CAAET,IAAI,IAAKU,OAAO,CAACC,GAAG,CAACX,IAAI,CAAC;EAAC;IAAAY,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrD,CAAC;AAEZ,CAAC;AAACC,EAAA,GAxBIvB,QAAQ;AAyBd,eAAeA,QAAQ;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}